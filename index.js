// Import required modules
const express = require('express');
const request = require('request')
const cheerio = require('cheerio');
const cors = require('cors');

// Create an Express app
const app = express();
const port = 3000;

// Define a route that makes a request using Axios and performs web scraping with Cheerio
app.get('/', async (req, res) => {
    getCvedata("https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&search_type=all&isCpeNameSearch=false")
  .then((jsonData) => {
    console.log(jsonData);
    res.send(jsonData);
    return jsonData
  })
  .catch((error) => {
    console.error(error);
  });
  
});

app.get('/exploit', async (req, res) => {
    getExploitdata("https://packetstormsecurity.com/files/tags/exploit/")
  .then((jsonData) => {
    console.log(jsonData);
    res.send(jsonData);
    return jsonData
  })
  .catch((error) => {
    console.error(error);
  }); 
});

// Start the Express server
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});

// maybe get more pages
const getCvedata = (webpage) => {
    return new Promise((resolve, reject) => {
      request(webpage, (err, res, htmlData) => {
        if (!err && res.statusCode === 200) {
          const result = [];
  
          const $ = cheerio.load(htmlData);
  
          $('tr').slice(1).each((index, rowElement) => {
            const row = cheerio.load(rowElement);
  
            const cveID = row('a').text().trim();
            const description = row('p').text().trim();
            const getPublishedDate = row('strong:contains("Published:") + span').text();
            const publishedDate = dateStandardize(getPublishedDate);
            const url = row('a').attr('href');
  
            // Construct an object for each row
            const rowData = {
              cveID,
              description,
              publishedDate,
              url: 'https://nvd.nist.gov' + url,
            };
  
            // Add the object to the result array
            result.push(rowData);
          });
  
          // Resolve the promise with the result array
          resolve(result);
        } else {
          // Reject the promise with an error message
          reject('Error: Unable to fetch data from the specified webpage');
        }
      });
    });
  };

var dateStandardize = (dateString) => {
    var dateStringSplit = dateString.split(';');
    dateStringSplit[1] = dateStringSplit[1].trim();
    return dateStringSplit
};


const getExploitdata = (webpage) => {
    return new Promise((resolve, reject) => {
      const preappendUrl = "https://packetstormsecurity.com";
      const result = [];
  
      request(webpage, (err, res, htmlData) => {
        if (!err && res.statusCode === 200) {
          const $ = cheerio.load(htmlData);
  
          $('.file').each((i, el) => {
            const exploiQuickDis = $(el).find('dt').text();
            const exploitLink = preappendUrl + $(el).find('dt').find('a').attr("href");
            const exploitdate = $(el).find('.datetime').text();
            let date = exploitdate.replace("Posted", "");
            const exploittag = $(el).find('.tags').text();
            let tag = exploittag.split(/[|,]/).slice(1);

  
            let exploitList = [];
            const exploit = $(el).find('.cve').text();
            if (exploit !== "") {
                exploitList = exploit.split(',').map(exploitItem => {
                  const exploitSpl = exploitItem.trim().split('|');
                  return exploitSpl.length > 1 ? exploitSpl[1] : null;
                }).filter(exploitItem => exploitItem !== null);
            }
              
            if (exploitList.length === 0) {
            exploitList.push("N/A");
            }
  
            const dlUrl = preappendUrl + $(el).find('.act-links').find("a").attr("href");
            const exploitMd5 = $(el).find('.md5').find("code").text();
            const exploitDetail = $(el).find('.detail').text();
  
            // Construct an object for each row
            const rowData = {
                exploiQuickDis,
                exploitLink,
                date,
                tag,
                exploitList,
                dlUrl,
                exploitMd5,
                exploitDetail
            };
  
            result.push(rowData);
          });
  
          // Resolve the promise with the result array
          resolve(result);
        } else {
          // Reject the promise with an error message
          reject('Error: Unable to fetch data from the specified webpage');
        }
      });
    });
};